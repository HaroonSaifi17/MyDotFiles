local M = {
  "ChristianChiarulli/defaultplus",
  lazy = false,
}

function M.config()
  vim.cmd.colorscheme("defaultplus")
  vim.api.nvim_set_hl(0, "SnacksIndent", { fg = "#333333", nocombine = true })
  vim.api.nvim_set_hl(0, "BlinkCmpMenuBorder", { fg = "#333333", nocombine = true })
  vim.api.nvim_set_hl(0, "BlinkCmpScrollBarThumb", { bg = "#666666", nocombine = true })
  vim.api.nvim_set_hl(0, "BlinkCmpGhostText", { fg = "#555555", bg = "#1e1e1e", nocombine = true })
  vim.api.nvim_set_hl(0, "BlinkCmpMenuSelection", { bg = "#333333", nocombine = true })

  vim.api.nvim_set_hl(0, "Delimiter", { fg = "#7ccdfd", bg = "NONE" })
  vim.api.nvim_set_hl(0, "Variable", { fg = "#ffffff", bg = "NONE" })
  vim.api.nvim_set_hl(0, "Function", { fg = "#a6dbff", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Type", { fg = "#bb99f7", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Keyword", { fg = "#ffc0b9", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Conditional", { fg = "#ffc0b9", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Repeat", { fg = "#ffc0b9", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Operator", { fg = "#e0e2ea", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "PreProc", { fg = "#87ffaf", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Include", { fg = "#ffc0b9", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Exception", { fg = "#ffc0b9", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "StorageClass", { fg = "#87ffaf", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Structure", { fg = "#bb99f7", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Typedef", { fg = "#bb99f7", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Define", { fg = "#ffc0b9", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Macro", { fg = "#ffc0b9", bg = "NONE", italic = true })
  vim.api.nvim_set_hl(0, "Tag", { fg = "#d7ba7d", bg = "NONE", italic = true })

  vim.api.nvim_set_hl(0, "@punctuation.bracket", { link = "Delimiter" })
  vim.api.nvim_set_hl(0, "@variable", { link = "Variable" })
  vim.api.nvim_set_hl(0, "@function", { link = "Function" })
  vim.api.nvim_set_hl(0, "@type", { link = "Type" })
  vim.api.nvim_set_hl(0, "@keyword", { link = "Keyword" })
  vim.api.nvim_set_hl(0, "@conditional", { link = "Conditional" })
  vim.api.nvim_set_hl(0, "@repeat", { link = "Repeat" })
  vim.api.nvim_set_hl(0, "@operator", { link = "Operator" })
  vim.api.nvim_set_hl(0, "@preproc", { link = "PreProc" })
  vim.api.nvim_set_hl(0, "@include", { link = "Include" })
  vim.api.nvim_set_hl(0, "@exception", { link = "Exception" })
  vim.api.nvim_set_hl(0, "@storageclass", { link = "StorageClass" })
  vim.api.nvim_set_hl(0, "@structure", { link = "Structure" })
  vim.api.nvim_set_hl(0, "@typedef", { link = "Typedef" })
  vim.api.nvim_set_hl(0, "@define", { link = "Define" })
  vim.api.nvim_set_hl(0, "@macro", { link = "Macro" })
  vim.api.nvim_set_hl(0, "@tag", { link = "Tag" })

  vim.api.nvim_set_hl(0, "BlinkCmpKindFunction", { fg = "#7ccdfd", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindVariable", { fg = "#a6dbff", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindClass", { fg = "#87ffaf", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindType", { fg = "#bb99f7", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindKeyword", { fg = "#ffc0b9", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindConstant", { fg = "#d7ba7d", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindField", { fg = "#e0e2ea", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindProperty", { fg = "#e0e2ea", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindEnum", { fg = "#87ffaf", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindInterface", { fg = "#87ffaf", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindModule", { fg = "#87ffaf", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindSnippet", { fg = "#a6dbff", bg = "NONE" })
  vim.api.nvim_set_hl(0, "BlinkCmpKindText", { fg = "#e0e2ea", bg = "NONE" })
end

return M
